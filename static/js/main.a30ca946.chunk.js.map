{"version":3,"sources":["Pokecard.js","Pokedex.js","Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","number","this","props","id","name","type","exp","imgSrc","slice","className","src","alt","Component","Pokedex","title","isWinner","pokemon","map","p","base_experience","defaultProps","Pokegame","hand1","hand2","length","randidx","Math","floor","random","randomPokemon","splice","push","reducer","totalExp","exp1","reduce","exp2","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a30ca946.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Pokecard.css\";\nconst Poke_api = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\n\nlet padToThree = number => (number <= 999 ? `00${number}`.slice(-3) : number);\n\nclass Pokecard extends Component {\n  render() {\n    const { id, name, type, exp } = this.props;\n    let imgSrc = `${Poke_api}${padToThree(id)}.png`;\n    return (\n      <div className=\"Pokecard\">\n        <h1 className=\"Pokecard-title\">{name}</h1>\n        <div className=\"Pokecard-img\">\n          <img src={imgSrc} alt={name} />\n        </div>\n        <div className=\"Pokecard-data\">Type:{type}</div>\n        <div className=\"Pokecard-data\">exp:{exp}</div>\n      </div>\n    );\n  }\n}\n\nexport default Pokecard;\n","import React, { Component } from \"react\";\nimport Pokecard from \"./Pokecard\";\nimport \"./Pokedex.css\";\n\nclass Pokedex extends Component {\n  static defaultProps = {\n    //Define default props\n    pokemon: [\n      { id: 4, name: \"Charmander\", type: \"fire\", base_experience: 62 },\n      { id: 7, name: \"Squirtle\", type: \"water\", base_experience: 63 },\n      { id: 11, name: \"Metapod\", type: \"bug\", base_experience: 72 },\n      { id: 12, name: \"Butterfree\", type: \"flying\", base_experience: 178 },\n      { id: 25, name: \"Pikachu\", type: \"electric\", base_experience: 112 },\n      { id: 39, name: \"Jigglypuff\", type: \"normal\", base_experience: 95 },\n      { id: 94, name: \"Gengar\", type: \"poison\", base_experience: 225 },\n      { id: 133, name: \"Eevee\", type: \"normal\", base_experience: 65 }\n    ]\n  };\n\n  render() {\n    let title;\n    if (this.props.isWinner) {\n      title = <h1 className=\"Pokedex-winner\">Winner</h1>; // a variable stores html code\n    } else {\n      title = <h1 className=\"Pokedex-loser\">Loser</h1>;\n    }\n\n    return (\n      <div className=\"Pokedex\">\n        {title}\n        <h4>Total Experience: {this.props.exp}</h4>\n\n        <div className=\"Pokedex-cards\">\n          {this.props.pokemon.map(p => (\n            <Pokecard\n              id={p.id}\n              name={p.name}\n              type={p.type}\n              exp={p.base_experience}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Pokedex;\n","import React, { Component } from \"react\";\nimport Pokedex from \"./Pokedex\";\n\nclass Pokegame extends Component {\n  static defaultProps = {\n    //Define default props\n    pokemon: [\n      { id: 4, name: \"Charmander\", type: \"fire\", base_experience: 62 },\n      { id: 7, name: \"Squirtle\", type: \"water\", base_experience: 63 },\n      { id: 11, name: \"Metapod\", type: \"bug\", base_experience: 72 },\n      { id: 12, name: \"Butterfree\", type: \"flying\", base_experience: 178 },\n      { id: 25, name: \"Pikachu\", type: \"electric\", base_experience: 112 },\n      { id: 39, name: \"Jigglypuff\", type: \"normal\", base_experience: 95 },\n      { id: 94, name: \"Gengar\", type: \"poison\", base_experience: 225 },\n      { id: 133, name: \"Eevee\", type: \"normal\", base_experience: 65 }\n    ]\n  };\n  render() {\n    let hand1 = [];\n    let hand2 = [...this.props.pokemon];\n    while (hand1.length < hand2.length) {\n      let randidx = Math.floor(Math.random() * hand2.length);\n      let randomPokemon = hand2.splice(randidx, 1)[0]; //splice() return an array which are been deleted\n      hand1.push(randomPokemon);\n    }\n\n    let reducer = (totalExp, pokemon) => totalExp + pokemon.base_experience; //accumulation function\n\n    let exp1 = hand1.reduce(reducer, 0);\n    let exp2 = hand2.reduce(reducer, 0);\n\n    return (\n      <div className=\"Pokegame\">\n        <Pokedex pokemon={hand1} exp={exp1} isWinner={exp1 > exp2} />\n        <Pokedex pokemon={hand2} exp={exp2} isWinner={exp2 > exp1} />\n      </div>\n    );\n  }\n}\n\nexport default Pokegame;\n","import React, { Component } from \"react\";\nimport Pokegame from \"./Pokegame\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Pokegame />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}